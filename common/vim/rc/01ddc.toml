[[plugins]]
repo = 'Shougo/pum.vim'
if='v:version>=802'

[[plugins]]
repo = 'Shougo/ddc.vim'
if='v:versionlong>=8023452'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
  " Customize global settings
  inoremap <silent><expr> <C-x><C-f> ddc#manual_complete('path')
  call ddc#custom#patch_global('autocompleteevents', [
    \ 'insertenter', 'textchangedi', 'textchangedp',
    \ 'cmdlineenter', 'cmdlinechanged',
    \ ])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')

  call ddc#custom#patch_global('sources', [
    \'vim-lsp',
    \'neosnippet',
    \'around'
    \])

  call ddc#custom#patch_global('sourceOptions', {
    \'_': {
    \  'matchers': ['matcher_head'],
    \  'sorters': ['sorter_rank'],
    \  'converters': ['converter_remove_overlap'],
    \},
    \'around': {
    \'mark': 'A',
    \'matchers':['matcher_head','matcher_length'],
    \},
    \'neosnippet': {'mark':'N','dup': v:true},
    \'cmdline': {
    \'mark': 'cmdline',
    \'forceCompletionPattern': '\S/\S*',
    \},
    \'cmdline-history': {'mark': 'history'},
    \'vim-lsp':{'mark':'LSP', 'dup':v:true},
    \'skkeleton': {
    \  'mark': 'skkeleton',
    \  'matchers': ['skkeleton'],
    \  'sorters': [],
    \  'minAutoCompleteLength': 2,
    \},
    \'rtags': {
    \  'mark': 'R',
    \  'forceCompletionPattern': '\.\w*|:\w*|->\w*'
    \},
    \'file': {
    \  'mark': 'F',
    \  'isVolatile': v:true,
    \  'minAutoCompleteLength': 1000,
    \  'forceCompletionPattern': '\S/\S*'
    \},
    \'rg': {
    \  'mark': 'rg',
    \  'matchers': ['matcher_head', 'matcher_length'],
    \  'minAutoCompleteLength': 4,
    \},
  \})

  " For insert mode completion
  inoremap <silent><expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  inoremap <silent><expr> <C-l>   ddc#map#extend()
  " For command line mode completion
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ? ddc#manual_complete() : "\<Tab>"
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-c>   <Cmd>call pum#map#cancel()<CR>
  cnoremap <C-o>   <Cmd>call pum#map#confirm()<CR>
  call ddc#enable()
'''

hook_add = '''
  nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
  nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?
  function! CommandlinePre(mode) abort
    " Note: It disables default command line completion!
    set wildchar=<C-t>

    cnoremap <expr><buffer> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:ddc_cmdline_completion') ? ddc#manual_complete() : "\<C-t>"

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    if a:mode ==# ':'
      call ddc#custom#patch_buffer('cmdlineSources',
              \ ['cmdline-history', 'cmdline', 'around'])
      call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#]*')
    else
      call ddc#custom#patch_buffer('cmdlineSources',
              \ ['around', 'line'])
    endif

    autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd MyAutoCmd InsertEnter <buffer> ++once call CommandlinePost()

    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <buffer> <Tab>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif

    set wildchar=<Tab>
  endfunction
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \ ['vim'], 'sources', has('nvim') ?
          \ ['necovim', 'around', 'deoppet', 'file'] :
          \ ['necovim', 'around', 'file']
          \ )
'''

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
depends = ['ddc.vim']
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source='''
     call skkeleton#config({
      \ 'eggLikeNewline': v:true,
      \ 'globalJisyo':"~/.skk/SKK-JISYO.L",
      \ })
     call skkeleton#register_kanatable('rom', {
       \ "z\<Space>": ["\u3000", ''],
       \ 'hh': ['お', 'h'],
       \ 'jj': 'escape',
       \ 'z,': ['―', ''],
       \ })

"Q: I want to enable "skkeleton" source when "skkeleton" is enabled only.

"A: >
  autocmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['skkeleton'])
  endfunction
  autocmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_post() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction
'''
[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = ['ddc.vim']
[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-omni'
[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rtags'
on_ft = ['c', 'cpp']


[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_source='ddc.vim'
hook_add = '''
let g:neosnippet#snippets_directory = "~/.cache/vim/snippet"
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
'''
hook_source = '''
"imap <expr><TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ neosnippet#expandable_or_jumpable() ?
"      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = ['neosnippet.vim']

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = ['neosnippet.vim']

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = ['neosnippet.vim']

[[plugins]]
repo = 'honza/vim-snippets'
on_source = ['neosnippet.vim']
hook_add = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
'''
[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = ['vim-lsp']
depends = ['denops.vim']
hook_add = '''
let g:lsp_signature_help_enabled=0
'''
hook_source='''
call signature_help#enable()
'''
