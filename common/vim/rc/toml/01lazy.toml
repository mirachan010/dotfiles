#use for remote plugins{{{
[[plugins]]
repo = 'roxma/nvim-yarp'
on_event = 'VimEnter'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_event = 'VimEnter'
#}}}

[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_cmd = ['Template']
hook_add = '''
let g:sonictemplate_vim_template_dir = [
\ '~\dotfiles\common\template'
\]
'''
[[plugins]]
repo = 'mattn/webapi-vim'
[[plugins]]
repo = 'mattn/vim-mastodon'
on_cmd = ['Mastodon']
depends = ['webapi-vim']

[[plugins]]
repo = 'ka-tsu-mo/at-vim-coder'
on_cmd = ['AtVimCoder']

[[plugins]]
repo = 'previm/previm'
on_cmd = ['PrevimOpen']
depends = ['open-browser.vim']
hook_source = '''
let g:previm_enable_realtime = 1
let g:previm_extra_libraries = [
\  {
\    'name': 'katex',
\    'files': [
\      {
\        'type': 'css',
\        'path': '_/js/extra/texmath.min.css',
\        'url': 'https://cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css',
\      },
\      {
\        'type': 'css',
\        'path': '_/css/extra/katex.min.css',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css',
\        'code': [
\          'renderMathInElement(document.body)',
\        ],
\      },
\      {
\        'type': 'js',
\        'path': '_/js/extra/katex-auto-render.min.js',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/contrib/auto-render.min.js',
\        'code': [
\          'renderMathInElement(document.body)',
\        ],
\      },
\      {
\        'type': 'js',
\        'path': '_/js/extra/katex.min.js',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.js',
\        'code': [
\          'document.querySelectorAll(''pre code.language-katex'').forEach(elem => {',
\          '  const html = katex.renderToString(elem.innerText, {',
\          '    displayMode: true,',
\          '    output: ''html'',',
\          '    throwOnError: false,',
\          '  })',
\          '  const span = document.createElement(''span'')',
\          '  span.innerHTML = html',
\          '  elem.parentNode.replaceWith(span)',
\          '})',
\          'document.querySelectorAll(''.inlkatex'').forEach(elem => {',
\          '  const html = katex.renderToString(elem.innerText, {',
\          '    output: ''html'',',
\          '    throwOnError: false,',
\          '  })',
\          '  const span = document.createElement(''span'')',
\          '  span.innerHTML = html',
\          '  elem.replaceWith(span)',
\          '})',
\        ],
\      },
\    ],
\  },
\]
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

#To use grep in vim
[[plugins]]
repo = 'mhinz/vim-grepper'
on_cmd = 'Grepper'
on_map = '<plug>(GrepperOperator)'

#make imgfiles
[[plugins]]
repo = 'skanehira/code2img.vim'
on_cmd = ['Code2img']
hook_source = '''
let g:code2img_theme = 'monokai'
let g:code2img_line_number = 1
'''
# use cheatsheet
[[plugins]]
repo='reireias/vim-cheatsheet'
on_cmd = ['Cheat']
hook_source = '''
if has('unix')
  let g:cheatsheet#cheat_file = '~/dotfiles/common/vim/rc/cheatsheet.md'
else
  let g:cheatsheet#cheat_file = '~\\dotfiles\\common\\vim\\rc\\cheatsheet.md'
endif
nmap <Leader>C <cmd>Cheat<CR>
'''

#Fern{{{
[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = ['Fern', 'Ferndo']
hook_add = '''
noremap <silent><Leader>ff <Cmd>Fern . -stay -drawer -keep -toggle -reveal=% -width=40<CR>
'''
hook_source = '''
function! s:init_fern() abort
  "Use 'select' instead of 'edit' for default 'open' action
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
  nmap <silent> <buffer> <expr> <Plug>(fern-quit-or-close-preview) fern_preview#smart_preview("\<Plug>(fern-action-preview:close)", ":q\<CR>")
  nmap <silent> <buffer> q <Plug>(fern-quit-or-close-preview)
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'yuki-yano/fern-preview.vim'
on_source = ['fern.vim']
#}}}

#for Gina{{{
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']
hook_add='''
nnoremap [Git] <Nop>
nmap <Leader>g [Git]
nnoremap [Git]. <Cmd>Gina cd<CR>
nnoremap [Git]b <Cmd>Gina branch -av<CR>
nnoremap [Git]c <Cmd>Gina compare<CR>
nnoremap [Git]d <Cmd>Gina diff<CR>
nnoremap [Git]l <Cmd>Gina log --graph --all<CR>
nnoremap [Git]s <Cmd>Gina status<CR>
nnoremap [Git]y <Cmd>Gina browse --exact --yank :<CR>
command! Amend  Gina commit --amend
command! Blame  Gina blame
command! Commit Gina commit
command! -nargs=* Stash Gina stash <args>
'''
#}}}

# reading-vimrc
[[plugins]]
repo = 'y0za/vim-reading-vimrc'
on_cmd = ['ReadingVimrcLoad', 'ReadingVimrcList', 'ReadingVimNext']

# For vim-lsp{{{
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['vim-lsp-settings', 'vim-lsp-icons']
on_ft=['python', 'go', 'toml', 'vim', 'markdown', 'c','cpp']
hook_add='''
"---====setup vim-lsp==---
let g:lsp_signs_enabled = 1
let g:lsp_signature_help_enabled = 0
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
let g:lsp_signs_information = {'text': 'i'}
let g:lsp_signs_hint = {'text': '?'}

nnoremap [Lsp] <Nop>
nmap <Leader>l [Lsp]
" 定義ジャンプ
nnoremap [Lsp]<C-]> :<C-u>LspDefinition<CR>
" 定義情報のホバー表示
nnoremap [Lsp]k :<C-u>LspHover<CR>
" 名前変更
nnoremap [Lsp]r :<C-u>LspRename<CR>
" 参照検索
nnoremap [Lsp]n :<C-u>LspReferences<CR>
" Lint結果をQuickFixで表示
nnoremap [Lsp]d :<C-u>LspDocumentDiagnostics<CR>
" テキスト整形
nnoremap [Lsp]f :<C-u>LspDocumentFormat<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = 0
hook_add='''
let g:lsp_settings_root_markers = [
  \ '.git',
  \ '.git/',
  \ ]
'''

[[plugins]]
repo = 'mattn/vim-lsp-icons'

# }}}

[[plugins]]
repo = 'mattn/vim-findroot'
on_event = ['BufRead']

[[plugins]]
repo = 'inside/vim-search-pulse'
on_event = ['BufRead']
[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = ['BufRead']

[[plugins]]
repo = 'skanehira/denops-translate.vim'
depends='denops.vim'
on_cmd = ['Translate']
hook_add = '''
xmap \tj :Translate<CR>
xmap \te :Translate!<CR>
'''

[[plugins]]
repo = 'skanehira/denops-germanium.vim'
depends='denops.vim'
on_cmd = ['Germanium']
hook_add = '''
nmap \cc <Plug>(Germanium)
xmap \cc <Plug>(Germanium)
'''

# undotree
[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = ['MundoToggle']

# use for markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = ['markdown', 'md']

# easy to change word
[[plugins]]
repo = 'lambdalisue/reword.vim'
on_event = ['BufRead']

# it can easy to maeke "surround"
[[plugins]]
repo = 'tpope/vim-surround'
on_event = ['BufRead']

# it can easy to make "comment"
[[plugins]]
repo = 'tpope/vim-commentary'
on_event = ['BufRead']

# it can easy to repeate command
[[plugins]]
repo = 'tpope/vim-repeat'
on_event = ['BufRead']

#    }}}

#    Easy action commands{{{
# It can run and test in vim
[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = ['BufRead']
hook_add = '''
nmap <Leader>r <Plug>(quickrun)
xmap <Leader>r <Plug>(quickrun-op)
'''

#}}}


[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''


[[plugins]]
repo='github/copilot.vim'
on_cmd='Copilot'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event='InsertEnter'
hook_source='''
call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = 'CursorHold'
hook_add = '''
    nmap s <Nop>
    xmap s <Nop>

'''
[[plugins]]
repo = 'mattn/vim-notification'
if = '!has("nvim")'
