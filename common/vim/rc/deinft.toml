
hook_add = '''
set expandtab tabstop=4 shiftwidth=4
" Bash
let g:is_bash = v:true

" Ruby
let g:ruby_no_expensive = v:true

" Java
let g:java_highlight_functions = 'style'
let g:java_highlight_all = v:true
let g:java_highlight_debug = v:true
let g:java_allow_cpp_keywords = v:true
let g:java_space_errors = v:true
let g:java_highlight_functions = v:true

" Tex
let g:tex_flavor = 'latex'

" markdown
let g:vim_markdown_frontmatter = v:true
let g:vim_markdown_toml_frontmatter = v:true
let g:vim_markdown_json_frontmatter = v:true
let g:vim_markdown_no_default_key_mappings = v:true

" Set help filetype
autocmd MyAutoCmd BufRead,BufNewFile *.jax setfiletype help

" Enable dein toml synatx
" Note: For neovim use nvim-treesitter syntax instead.
if !has('nvim')
  autocmd MyAutoCmd CursorHold */rc/*.toml call dein#toml#syntax()
endif

" Disable quotes keyword
autocmd MyAutoCmd BufEnter,BufRead,BufNewFile *.md setlocal iskeyword-='

" Update filetype.
autocmd MyAutoCmd BufWritePost * nested
\ if &l:filetype ==# '' || exists('b:ftdetect')
\ |   unlet! b:ftdetect
\ |   filetype detect
\ | endif

" Disable default plugins
let g:loaded_2html_plugin      = v:true
let g:loaded_logiPat           = v:true
let g:loaded_getscriptPlugin   = v:true
let g:loaded_gzip              = v:true
let g:loaded_gtags             = v:true
let g:loaded_gtags_cscope      = v:true
let g:loaded_man               = v:true
let g:loaded_matchit           = v:true
let g:loaded_matchparen        = v:true
let g:loaded_netrwFileHandlers = v:true
let g:loaded_netrwPlugin       = v:true
let g:loaded_netrwSettings     = v:true
let g:loaded_rrhelper          = v:true
let g:loaded_shada_plugin      = v:true
let g:loaded_spellfile_plugin  = v:true
let g:loaded_tarPlugin         = v:true
let g:loaded_tutor_mode_plugin = v:true
let g:loaded_vimballPlugin     = v:true
let g:loaded_zipPlugin         = v:true
'''

[ftplugin]

_ = '''
" Disable automatically insert comment.
setl formatoptions-=r
setl formatoptions-=o
setl formatoptions+=mMBl

" Disable auto wrap.
if &l:textwidth != 70 && &filetype !=# 'help'
  setlocal textwidth=0
endif

if !&l:modifiable
  setlocal nofoldenable
  setlocal foldcolumn=0
  setlocal colorcolumn=
endif
'''

python = '''
" Indent settings.
"setlocal foldmethod=indent
setlocal softtabstop=4
setlocal shiftwidth=4
setlocal textwidth=80
setlocal smarttab
setlocal expandtab
setlocal nosmartindent
'''

html = '''
setlocal includeexpr=substitute(v:fname,'^\\/','','')
setlocal path+=./;/
'''

go = '''
highlight default link goErr WarningMsg
match goErr /\<err\>/
'''

vim = '''
setlocal shiftwidth=2 softtabstop=2
setlocal iskeyword+=:,#
setlocal indentkeys+=\\,endif,endfunction,endfor,endwhile,endtry
setlocal foldmethod=marker
let b:echodoc_enabled = v:true
'''

toml = '''
setlocal foldmethod=marker
let b:echodoc_enabled = v:true
'''

qfreplace = 'setlocal nofoldenable'

help = '''
setlocal iskeyword+=:
setlocal iskeyword+=#
setlocal iskeyword+=-
nnoremap <buffer> q <cmd>q<cr>
'''

ruby = '''
setlocal iskeyword+=!
setlocal iskeyword+=?
setlocal omnifunc=
setlocal shiftwidth=2 softtabstop=2 tabstop=2
'''

typescript = '''
setlocal shiftwidth=2
'''

markdown = '''
setlocal comments=b:*,b:-,b:+,b:1.,nb:>
setlocal formatoptions-=c formatoptions+=jro
setlocal comments=nb:>
        \ comments+=b:*\ [\ ],b:*\ [x],b:*
        \ comments+=b:+\ [\ ],b:+\ [x],b:+
        \ comments+=b:-\ [\ ],b:-\ [x],b:-
        \ comments+=b:1.\ [\ ],b:1.\ [x],b:1.
        \ formatoptions-=c formatoptions+=jro
function! s:markdown_checkbox(from, to) abort
  let from = a:from
  let to = a:to

  let another = line('v')
  if from == to && from != another
    if another < from
      let from = another
    else
      let to = another
    endif
  endif

  let curpos = getcursorcharpos()

  let lnum = from
  while lnum <= to
    let line = getline(lnum)

    let list_pattern = '\v^\s*([*+-]|\d+\.)\s+'
    if line !~ list_pattern
      " not list -> add list marker and blank box
      let line = substitute(line, '\v\S|$', '- [ ] \0', '')
      if lnum == curpos[1]
        let curpos[2] += 6
      endif
    elseif line =~ list_pattern .. '\[ \]\s+'
      " blank box -> check
      let line = substitute(line, '\[ \]', '[x]', '')
    elseif line =~ list_pattern .. '\[x\]\s+'
      " checked box -> uncheck
      let line = substitute(line, '\[x\]', '[ ]', '')
    else
      " list but no box -> add box after list marker
      let line = substitute(line, '\v\S+', '\0 [ ]', '')
      if lnum == curpos[1]
        let curpos[2] += 4
      endif
    endif

    call setline(lnum, line)
    let lnum += 1
  endwhile
  call setcursorcharpos(curpos[1], curpos[2])
endfunction
command! -buffer -range MarkdownCheckbox call s:markdown_checkbox(<line1>, <line2>)
nnoremap <buffer> <C-CR> <Cmd>MarkdownCheckbox<CR>
inoremap <buffer> <C-CR> <Cmd>MarkdownCheckbox<CR>
xnoremap <buffer> <C-CR> <Cmd>MarkdownCheckbox<CR>
'''
