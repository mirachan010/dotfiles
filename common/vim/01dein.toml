[[plugins]]
repo='neoclide/coc.nvim'
rev='release'
if=''' has('nvim')'''

#To use grep in vim
[[plugins]]
repo = 'mhinz/vim-grepper'
on_cmd = 'Grepper'
on_map = '<plug>(GrepperOperator)'

[[plugins]]
repo='Shougo/defx.nvim'
on_cmd = ['Defx']
hook_sourse = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_copy_icon = ''
let g:defx_icons_move_icon = ''
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = ['defx.nvim']

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_source = ['defx.nvim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if='''!has('nvim')'''
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
if='''has('nvim')'''
on_event = 'InsertEnter'
hook_source = '''
imap <C-k>  <Plug>(deoppet_expand)
imap <C-f>  <Plug>(deoppet_jump_forward)
imap <C-b>  <Plug>(deoppet_jump_backward)

call deoppet#initialize()
call deoppet#custom#option('snippets_dirs',
\ globpath(&runtimepath, 'neosnippets', 1, 1))
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if='''!has('nvim')'''
on_event = 'InsertEnter'
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
      \ pumvisible() ? "\<C-n>" :
      \ neosnippet#expandable_or_jumpable() ?
      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source= ['neosnippet.vim']

[[plugins]]
repo = 'honza/vim-snippets'
on_source = ['neosnippet.vim']
hook_add = '''
let g:neosnippet#enable_snipmate_compatibility = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
nnoremap [denite] <Nop>
nmap <Leader>d [denite]
nnoremap <silent> [denite]b :<C-u>Denite buffer -direction=topleft<CR>
nnoremap <silent> [denite]l :<C-u>Denite file/old -direction=topleft<CR>
nnoremap <silent> [denite]f :<C-u>Denite file -direction=topleft<CR>
nnoremap <silent> [denite]d :<C-u>Denite dein -direction=topleft<CR>
"nnoremap <silent> [denite]m :<C-u>Denite memo -direction=topleft <CR>
nnoremap <silent> [denite]me :<C-u>Denite memo memo:new -direction=topleft <CR>
nnoremap <silent> [denite]ma :<C-u>Denite mark -direction=topleft <CR>
nnoremap <silent> [denite]g :<C-u>Denite ghq -direction=topleft <CR>
nnoremap <silent> [denite]h :<C-u>Denite help -direction=topleft <CR>
nnoremap <silent> [denite]p :<C-u>Denite PluginsList -direction=topleft <CR>
'''
hook_source='''
if (has('nvim'))
    let s:denite_win_width_percent = 0.85
    let s:denite_win_height_percent = 0.7
    call denite#custom#option('default', {
        \ 'split': 'floating',
        \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
        \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
        \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
        \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
        \ })
  set pumblend=45
  augroup transparent-windows
      autocmd!
      autocmd FileType denite set winblend=30
      autocmd FileType denite-filter set winblend=30
  augroup END
endif 
'''


[plugins.ftplugin]
denite = '''
nnoremap <silent><buffer><expr> q denite#do_map('quit')
nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
'''


[[plugins]]
repo = 'Jagua/vim-denite-ghq'
depends = ['denite.nvim']
on_source = ['denite.nvim']

[[plugins]]
repo = 'delphinus/vim-denite-memo'
if = '''has('unix')'''
on_source = ['denite.nvim']

[[plugins]]
repo = 'mirachan010/vim-denite-plugins'
depends = ['denite.nvim']
on_source = ['denite.nvim']

[[plugins]]
repo = 'mirachan010/vim-pluginlist'
depends = ['denite.nvim']
on_source = ['vim-denite-plugins']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
if='''!has('nvim')'''
depends = ['deoplete.nvim']
on_source = ['deoplete.nvim']

[[plugins]]
repo ='Shougo/neco-vim'
on_ft=['vim']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
if='''!has('nvim')'''
merged = '0'
on_event = 'VimEnter'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
if='''!has('nvim')'''
on_event = 'VimEnter'
hook_source='''
"---====setup vim-lsp==---
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
let g:lsp_signs_information = {'text': 'i'}
let g:lsp_signs_hint = {'text': '?'}

nmap <Leader>l [Lsp]
" 定義ジャンプ(デフォルトのctagsによるジャンプを上書きしているのでこのあたりは好みが別れます)
nnoremap [Lsp]<C-]> :<C-u>LspDefinition<CR>
" 定義情報のホバー表示
nnoremap [Lsp]K :<C-u>LspHover<CR>
" 名前変更
nnoremap [Lsp]R :<C-u>LspRename<CR>
" 参照検索
nnoremap [Lsp]n :<C-u>LspReferences<CR>
" Lint結果をQuickFixで表示
nnoremap [Lsp]f :<C-u>LspDocumentDiagnostics<CR>
" テキスト整形
nnoremap [Lsp]s :<C-u>LspDocumentFormat<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
build='./install --all'
on_cmd = ['FZF']
marged=0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft= ['markdown']
build = '''
cd app & yarn install
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','css','java','javascript','php','perl']

#filetype highligt
#toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
#css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']
#html5
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']
#ps1
[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = ['ps1']


[[plugins]]
repo = 'skanehira/preview-markdown.vim'
if='''has('unix')'''

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = 'vimEnter'


[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']

[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = ['Fern', 'FernDo']

