#To use grep in vim
[[plugins]]
repo = 'mhinz/vim-grepper'
on_cmd = 'Grepper'
on_map = '<plug>(GrepperOperator)'

[[plugins]]
repo = 'Shougo/deoppet.nvim'
if='''has('nvim')'''
on_event = 'InsertEnter'
hook_source = '''
  imap <C-k>  <Plug>(deoppet_expand)
  imap <C-f>  <Plug>(deoppet_jump_forward)
  imap <C-b>  <Plug>(deoppet_jump_backward)

  call deoppet#initialize()
  call deoppet#custom#option('snippets_dirs',
  \ globpath(&runtimepath, 'neosnippets', 1, 1))
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if='''!has('nvim')'''
on_event = 'InsertEnter'
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
      \ pumvisible() ? "\<C-n>" :
      \ neosnippet#expandable_or_jumpable() ?
      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source= ['neosnippet.vim']

#filetype highligt
#toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
#css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']
#html5
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']
#ps1
[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = ['ps1']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
nnoremap [denite] <Nop>
nmap <Leader>d [denite]
nnoremap <silent> [denite]b :<C-u>Denite buffer -direction=topleft<CR>
nnoremap <silent> [denite]l :<C-u>Denite file/old -direction=topleft<CR>
nnoremap <silent> [denite]f :<C-u>Denite file -direction=topleft<CR>
nnoremap <silent> [denite]d :<C-u>Denite dein -direction=topleft<CR>
"nnoremap <silent> [denite]m :<C-u>Denite memo -direction=topleft <CR>
nnoremap <silent> [denite]me :<C-u>Denite memo memo:new -direction=topleft <CR>
nnoremap <silent> [denite]ma :<C-u>Denite mark -direction=topleft <CR>
nnoremap <silent> [denite]g :<C-u>Denite ghq -direction=topleft <CR>
nnoremap <silent> [denite]h :<C-u>Denite help -direction=topleft <CR>
nnoremap <silent> [denite]p :<C-u>Denite PluginsList -direction=topleft <CR>
'''
hook_source='''
if (has('nvim'))
    let s:denite_win_width_percent = 0.85
    let s:denite_win_height_percent = 0.7
    call denite#custom#option('default', {
        \ 'split': 'floating',
        \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
        \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
        \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
        \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
        \ })
  set pumblend=45
  augroup transparent-windows
      autocmd!
      autocmd FileType denite set winblend=30
      autocmd FileType denite-filter set winblend=30
  augroup END
endif 
'''
[plugins.ftplugin]
denite = '''
nnoremap <silent><buffer><expr> q denite#do_map('quit')
nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
'''
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if='''!has('nvim')'''
on_event = 'InsertEnter'
hook_add= '''
  let g:deoplete#enable_at_startup = 1
'''
