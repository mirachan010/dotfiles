#use for remote plugins{{{
[[plugins]]
repo = 'roxma/nvim-yarp'
on_event = 'VimEnter'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_event = 'VimEnter'
#    }}}
#popup{{{
[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
inoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])

nnoremap :       <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources',
          \ ['cmdline', 'cmdline-history', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
  call ddc#enable()
endfunction
function! CommandlinePost() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  cunmap <Tab>
endfunction
'''
#}}}
#auto complete{{{
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['CmdlineEnter','InsertEnter']
hook_source = '''
" Customize global settings
call ddc#custom#patch_global('completionMenu', 'pum.vim')
" Use around source.
call ddc#custom#patch_global('sources', [
      \'vim-lsp',
      \'skkeleton',
      \'neosnippet',
      \'around',
      \])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank']
      \ },
      \ 'around': {'mark': 'A'},
      \ 'eskk': {
      \   'mark':'E',
      \   'matchers': [],
      \   'sorters': []
      \ },
      \ 'neosnippet': {'mark':'N','dup': v:true},
      \ 'cmdline': {'mark': 'cmdline'},
      \ 'vim-lsp':{'mark':'LSP', 'dup':v:true},
        \   'skkeleton': {
        \     'mark': 'skkeleton',
        \     'matchers': ['skkeleton'],
        \     'sorters': [],
        \     'minAutoCompleteLength': 2,
        \   },
      \ }
      \)


" Change source options
call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

"" Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'

# eskk.vim
[[plugins]]
repo = 'tyru/eskk.vim'
if=0
on_source = ['ddc.vim']
hook_source = '''
let g:eskk#directory = "~/.eskk"
let g:eskk#dictionary = { 'path':"~/.skk-jisyo", 'sorted': 0, 'encoding':'utf-8',}
let g:eskk#large_dictionary = { 'path':"~/.eskk/SKK-JISYO.L", 'sorted': 1, 'encoding':'euc-jp',}
let g:eskk#enable_completion=1
let g:eskk#egg_like_newline = 1
set imdisable
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = ['ddc.vim']
hook_add = '''
function! s:skkeleton_init() abort
     call skkeleton#config({
      \ 'eggLikeNewline': v:true,
      \ 'globalJisyo':"~/.eskk/SKK-JISYO.L",
      \ })
     call skkeleton#register_kanatable('rom', {
       \ "z\<Space>": ["\u3000", ''],
       \ 'hh': ['お', 'h'],
       \ 'jj': 'escape',
       \ 'z,': ['―', ''],
       \ "z\<Space>": ["\u3000", ''],
       \ })
endfunction
autocmd User skkeleton-initialize-pre call s:skkeleton_init()
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = ['ddc.vim']
#}}}
#snippets{{{
[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertEnter'
hook_add = '''
let g:neosnippet#snippets_directory = "~/.cache/vim/snippet"
'''
hook_source = '''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <expr><TAB>
      \ pumvisible() ? "\<C-n>" :
      \ neosnippet#expandable_or_jumpable() ?
      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = ['neosnippet.vim']
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'VimEnter'
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_event = 'VimEnter'
[[plugins]]
repo = 'honza/vim-snippets'
on_source = ['neosnippet.vim']
hook_add = '''
let g:neosnippet#enable_snipmate_compatibility = 1
'''
#}}}
#filetype highligt{{{
#toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
#css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']
#html5
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']
#ps1
[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = ['ps1']
#}}}
#denite.nvim{{{
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
nnoremap [denite] <Nop>
nmap <Leader>d [denite]
nnoremap <silent> [denite]b :<C-u>Denite buffer -direction=topleft<CR>
nnoremap <silent> [denite]l :<C-u>Denite file/old -direction=topleft<CR>
nnoremap <silent> [denite]f :<C-u>Denite file file:new -direction=topleft<CR>
nnoremap <silent> [denite]d :<C-u>Denite dein -direction=topleft<CR>
nnoremap <silent> [denite]ma :<C-u>Denite mark -direction=topleft <CR>
nnoremap <silent> [denite]h :<C-u>Denite help -direction=topleft <CR>
'''
[plugins.ftplugin]
denite = '''
nnoremap <silent><buffer><expr> q denite#do_map('quit')
nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
depends = ['denite.nvim']
on_source = ['denite.nvim']
hook_add = '''
nnoremap <silent> [denite]g :<C-u>Denite ghq -direction=topleft <CR>
'''

[[plugins]]
repo = 'delphinus/vim-denite-memo'
if = '''has('unix')'''
on_source = ['denite.nvim']
hook_add = '''
nnoremap <silent> [denite]me :<C-u>Denite memo memo:new -direction=topleft <CR>
'''

[[plugins]]
repo = 'mirachan010/vim-denite-plugins'
depends = ['denite.nvim']
on_source = ['denite.nvim']
hook_add='''
nnoremap <silent> [denite]p :<C-u>Denite PluginsList -direction=topleft <CR>
'''

[[plugins]]
repo = 'mirachan010/vim-pluginlist'
depends = ['denite.nvim']
on_source = ['vim-denite-plugins']
#}}}
#Defx.vim{{{
[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo='Shougo/defx.nvim'
on_cmd = ['Defx']
hook_source = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_copy_icon = ''
let g:defx_icons_move_icon = ''
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
call defx#custom#option('_', {
  \ 'winwidth': 40,
  \ 'split': 'vertical',
  \ 'direction': 'topleft',
  \ 'show_ignored_files': 1,
  \ 'buffer_name': 'exproler',
  \ 'toggle': 1,
  \ 'resume': 1,
  \ 'columns': 'indent:icons:filename:git:mark',
  \ })
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
'''
hook_add = '''
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
   \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
  \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = ['defx.nvim']

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_source = ['defx.nvim']
#}}}
#emmet あんまりつかってない{{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','css','java','javascript','php']
hook_source = '''
let g:user_emmet_leader_key = '<C-y>'
let g:user_emmet_settings = {
\    'variables' : {
\        'lang' : 'ja',
\    },
\    'html' : {
\        'filters' : 'html',
\        'indentation' : ' ',
\        'expandos' : {
\            'ol': 'ol>li',
\            'list': 'ul>li*3',
\        },
\        'default_attributes': {
\            'a': {'href': ''},
\            'link': [{'rel': 'stylesheet'}, {'href': ''}],
\        },
\        'aliases': {
\            'bq': 'blockquote',
\            'obj': 'object',
\            'src': 'source',
\        },
\        'empty_elements': 'area,base,basefont,...,isindex,link,meta,...',
\        'block_elements': 'address,applet,blockquote,...,li,link,map,...',
\        'inline_elements': 'a,abbr,acronym,...',
\        'empty_element_suffix': ' />',
\    },
\    'php' : {
\        'extends' : 'html',
\        'filters' : 'html,c',
\    },
\    'css' : {
\        'filters' : 'fc',
\    },
\    'javascript' : {
\        'snippets' : {
\            'jq' : "\\$(function() {\n\t${cursor}${child}\n});",
\            'jq:each' : "\\$.each(arr, function(index, item)\n\t${child}\n});",
\            'fn' : "(function() {\n\t${cursor}\n})();",
\            'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\        },
\    },
\    'java' : {
\        'indentation' : '    ',
\        'snippets' : {
\            'main': "public static void main(String[] args) {\n\t|\n}",
\            'println': "System.out.println(\"|\");",
\            'class': "public class | {\n}\n",
\        },
\    },
\}
'''
#}}}
[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_cmd = ['Template']
hook_add = '''
let g:sonictemplate_vim_template_dir = [
\ '~\dotfiles\common\template'
\]
'''
[[plugins]]
repo = 'mattn/webapi-vim'
[[plugins]]
repo = 'mattn/vim-mastodon'
on_cmd = ['Mastodon']
depends = ['webapi-vim']

[[plugins]]
repo = 'ka-tsu-mo/at-vim-coder'
on_cmd = ['AtVimCoder']
[[plugins]]
repo = 'previm/previm'
on_cmd = ['PrevimOpen']
depends = ['open-browser.vim']
hook_source = '''
let g:previm_enable_realtime = 1
'''
[[plugins]]
repo = 'tyru/open-browser.vim'
#To use grep in vim
[[plugins]]
repo = 'mhinz/vim-grepper'
on_cmd = 'Grepper'
on_map = '<plug>(GrepperOperator)'
#make imgfiles
[[plugins]]
repo = 'skanehira/code2img.vim'
on_cmd = ['Code2img']
hook_source = '''
let g:code2img_theme = 'monokai'
let g:code2img_line_number = 1
'''
# use cheatsheet
[[plugins]]
repo='reireias/vim-cheatsheet'
on_cmd = ['Cheat']
hook_source = '''
if has('unix')
  let g:cheatsheet#cheat_file = '~/dotfiles/common/vim/plug_setting/cheatsheet.md'
else
  let g:cheatsheet#cheat_file = '~\\dotfiles\\common\\vim\\plug_setting\\cheatsheet.md'
endif
nmap <Leader>C <cmd>Cheat<CR>
'''
#Fern{{{
[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = ['Fern', 'Ferndo']
hook_add = '''
noremap <silent><Leader>ff <Cmd>Fern . -stay -drawer -keep -toggle -reveal=% -width=40<CR>
'''
hook_source = '''
function! s:init_fern() abort
  "Use 'select' instead of 'edit' for default 'open' action
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
  nmap <silent> <buffer> <expr> <Plug>(fern-quit-or-close-preview) fern_preview#smart_preview("\<Plug>(fern-action-preview:close)", ":q\<CR>")
  nmap <silent> <buffer> q <Plug>(fern-quit-or-close-preview)
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''
[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = ['fern.vim']
[[plugins]]
repo = 'yuki-yano/fern-preview.vim'
on_source = ['fern.vim']
#}}}
#for Gina{{{
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']
hook_add='''
nnoremap [Git] <Nop>
nmap <Leader>g [Git]
nnoremap [Git]. <Cmd>Gina cd<CR>
nnoremap [Git]b <Cmd>Gina branch -av<CR>
nnoremap [Git]c <Cmd>Gina compare<CR>
nnoremap [Git]d <Cmd>Gina diff<CR>
nnoremap [Git]l <Cmd>Gina log --graph --all<CR>
nnoremap [Git]s <Cmd>Gina status<CR>
nnoremap [Git]y <Cmd>Gina browse --exact --yank :<CR>
command! Amend  Gina commit --amend
command! Blame  Gina blame
command! Commit Gina commit
command! -nargs=* Stash Gina stash <args>
'''
#}}}
# reading-vimrc
[[plugins]]
repo = 'y0za/vim-reading-vimrc'
on_cmd = ['ReadingVimrcLoad', 'ReadingVimrcList', 'ReadingVimNext']

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
depends='denops.vim'
hook_source='''
call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
'''
hook_source = '''
" Set default sources
call ddu#custom#patch_global({
    \ 'sources': [{'name': 'file', 'params': {}}],
    \ })

" Call default sources
call ddu#start({})

" Set buffer-name specific configuration
call ddu#custom#patch_buffer('files', {
    \ 'sources': [
    \   {'name': 'file', 'params': {}},
    \   {'name': 'file_old', 'params': {}},
    \ ],
    \ })

" Specify buffer name
call ddu#start({'buffer_name': 'files'})
'''
  
