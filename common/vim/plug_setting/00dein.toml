[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token=$GITHUB_OAUTH_TOKEN
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja.git'
hook_add = '''
    set helplang=ja,en
'''
# Set if use neovim{{{
[[plugins]]
repo='neoclide/coc.nvim'
rev='release'
if=''' has('nvim')'''
hook_add = '''
nnoremap [coc] <Nop>
nmap <Leader>c [coc]
" Using CocList
" Show all diagnostics
nnoremap <silent> [coc]d  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> [coc]e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> [coc]c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> [coc]o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> [coc]s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> [coc]j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> [coc]k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> [coc]p  :<C-u>CocListResume<CR>

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <c-k> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> [coc]<C-d> <Plug>(coc-range-select)
xmap <silent> [coc]<C-d> <Plug>(coc-range-select)
imap <C-l> <Plug>(coc-snippets-expand)

"nnoremap <silent> <Leader>A :<C-u>SrcExplToggle<CR>:NERDTreeToggle<CR>:TagbarToggle<CR>

    let g:coc_global_extensions=[
        \'coc-json',
        \'coc-python',
        \'coc-tsserver',
        \'coc-snippets'
        \'coc-marketplace'
    \]

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction
"set quickrun
let g:quickrun_config={"*":{'hook/time/enable':'1'},}



" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"for pairs
autocmd FileType vim let b:coc_pairs_disabled=['"']
autocmd FileType markdown let b:coc_pairs=[["$","$"]]
'''# }}}

# For vim-lsp{{{
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
if=''' !has('nvim')'''
hook_add='''
"---====setup vim-lsp==---
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
let g:lsp_signs_information = {'text': 'i'}
let g:lsp_signs_hint = {'text': '?'}

nnoremap [Lsp] <Nop>
nmap <Leader>l [Lsp]
" 定義ジャンプ
nnoremap [Lsp]<C-]> :<C-u>LspDefinition<CR>
" 定義情報のホバー表示
nnoremap [Lsp]k :<C-u>LspHover<CR>
" 名前変更
nnoremap [Lsp]r :<C-u>LspRename<CR>
" 参照検索
nnoremap [Lsp]n :<C-u>LspReferences<CR>
" Lint結果をQuickFixで表示
nnoremap [Lsp]d :<C-u>LspDocumentDiagnostics<CR>
" テキスト整形
nnoremap [Lsp]f :<C-u>LspDocumentFormat<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
if=''' !has('nvim')'''
merged = 0
hook_add='''
let g:lsp_settings = {
  \   'efm-langserver':{
  \     'disabled': v:false,
  \     'allowlist':['markdown'],
  \   }
  \ }
let g:lsp_settings_root_markers = [
  \ '.git',
  \ '.git/',
  \ ]
'''
[[plugins]]
repo = 'mattn/vim-findroot'

[[plugins]]
repo = 'mattn/vim-lsp-icons'
if=''' !has('nvim')'''# }}}

# Set if use Vim{{{
#    use for remote plugins{{{
[[plugins]]
if=''' !has('nvim')'''
repo = 'roxma/nvim-yarp'

[[plugins]]
if=''' !has('nvim')'''
repo = 'roxma/vim-hug-neovim-rpc'
#    }}}
# Set easy translate
[[plugins]]
repo = 'skanehira/translate.vim'
if=''' !has('nvim')'''
rev = 'v0.0.3'
hook_add = '''
    let g:translate_source = "en"
    let g:translate_target = "ja"
    let g:translate_winsize = 10
    vmap tj <Plug>(VTranslate)
    vmap te <Plug>(VTranslateBang)
'''
#make imgfiles
[[plugins]]
repo = 'skanehira/code2img.vim'
if=''' !has('nvim')'''
hook_add = '''
let g:code2img_theme = 'monokai'
let g:code2img_line_number = 1
'''
# }}}

# Make new Function{{{
# help for f or F
[[plugins]]
repo='unblevable/quick-scope'
hook_add='''
    let g:qs_highlight_on_keys = ['f','F']
'''
# undotree
[[plugins]]
repo = 'simnalamburt/vim-mundo'
#    Easy action motions{{{
# it can easy to maeke "surround"
[[plugins]]
repo = 'tpope/vim-surround'
# it can easy to make "comment"
[[plugins]]
repo = 'tpope/vim-commentary'
# it can easy to repeate command
[[plugins]]
repo = 'tpope/vim-repeat'
#    }}}
#    Easy action commands{{{
# reading-vimrc
[[plugins]]
repo = 'y0za/vim-reading-vimrc'
# eskk.vim
[[plugins]]
repo = 'tyru/eskk.vim'
# easy to change word
[[plugins]]
repo = 'lambdalisue/reword.vim'
# use for markdown
[[plugins]]
repo = 'godlygeek/tabular'
# It can run and test in vim
[[plugins]]
repo='thinca/vim-quickrun'
# use cheatsheet
[[plugins]]
repo='reireias/vim-cheatsheet'
hook_add = '''
if has('unix')
  let g:cheatsheet#cheat_file = '~/dotfiles/common/vim/plug_setting/cheatsheet.md'
else
  let g:cheatsheet#cheat_file = '~\\dotfiles\\common\\vim\\plug_setting\\cheatsheet.md'
endif
nmap <Leader>C :<c-u>Cheat<CR>
'''
# Set shortcut commands
[[plugins]]
repo = 'c000/rapidfire.vim'
hook_add = '''
  if has('unix')
    let g:rapidfire#persistent_filename="~/dotfiles/common/vim/plug_setting/key_setting.json"
  else
    let g:rapidfire#persistent_filename="~\\dotfiles\\common\\vim\\plug_setting\\key_setting.json"
  endif
    nnoremap <F1>    :<C-u>Rapidfire F1<CR>
    nnoremap <F2>    :<C-u>Rapidfire F2<CR>
    nnoremap <F3>    :<C-u>Rapidfire F3<CR>
    nnoremap <Up>    :<C-u>Rapidfire Up<CR>
    nnoremap <Left>  :<C-u>Rapidfire Left<CR>
    nnoremap <Right> :<C-u>Rapidfire Right<CR>
    nnoremap <Down>  :<C-u>Rapidfire Down<CR>
'''
# To see github.com
[[plugins]]
repo = 'skanehira/gh.vim'
hook_add = '''
  let g:gh_token=$GITHUB_OAUTH_TOKEN
'''
#    }}}
# }}}

# To use git in vim{{{
[[plugins]]
repo = 'tpope/vim-fugitive'
# Check git diff in numberline
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add='''
   set signcolumn=yes
   let g:gitgutter_map_keys = 0
   nnoremap [Git] <Nop>
   nmap <Leader>g [Git]
   nmap [Git]p <Plug>(GitGutterPrevHunk)
   nmap [Git]n <Plug>(GitGutterNextHunk)
   nmap [Git]a <Plug>(GitGutterStageHunk)
   nmap [Git]u <Plug>(GitGutterRevertHunk)
   nmap [Git]v <Plug>(GitGutterPreviewHunk)
'''
[[plugins]]
repo = 'lambdalisue/gina.vim'
# }}}

# Set looks{{{
# status line
[[plugins]]
repo = 'itchyny/lightline.vim'

# Make indentline
[[plugins]]
repo = 'Yggdroot/indentLine'
on_cmd = ['IndentLinesToggle']
hook_add = '''
    let g:loaded_indentLine = 1
'''
#    Colorschemes{{{
[[plugins]]
repo = 'ghifarit53/tokyonight-vim'
#    }}}
# }}}
