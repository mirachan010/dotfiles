[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token=$GITHUB_OAUTH_TOKEN
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja.git'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]]
repo = 'mattn/vim-findroot'

#zaj Set if use Vim{{{
# For vim-lsp{{{
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
"---====setup vim-lsp==---
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
let g:lsp_signs_information = {'text': 'i'}
let g:lsp_signs_hint = {'text': '?'}

nnoremap [Lsp] <Nop>
nmap <Leader>l [Lsp]
" 定義ジャンプ
nnoremap [Lsp]<C-]> :<C-u>LspDefinition<CR>
" 定義情報のホバー表示
nnoremap [Lsp]k :<C-u>LspHover<CR>
" 名前変更
nnoremap [Lsp]r :<C-u>LspRename<CR>
" 参照検索
nnoremap [Lsp]n :<C-u>LspReferences<CR>
" Lint結果をQuickFixで表示
nnoremap [Lsp]d :<C-u>LspDocumentDiagnostics<CR>
" テキスト整形
nnoremap [Lsp]f :<C-u>LspDocumentFormat<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
if=''' !has('nvim')'''
merged = 0
hook_add='''
let g:lsp_settings = {
  \   'efm-langserver':{
  \     'disabled': v:false,
  \     'allowlist':['markdown'],
  \   }
  \ }
let g:lsp_settings_root_markers = [
  \ '.git',
  \ '.git/',
  \ ]
'''

[[plugins]]
repo = 'mattn/vim-lsp-icons'

# }}}
# Set easy translate{{{
[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
    let g:translate_source = "en"
    let g:translate_target = "ja"
    let g:translate_winsize = 10
    vmap tj <Plug>(VTranslate)
    vmap te <Plug>(VTranslateBang)
'''
#}}}
#make imgfiles{{{
[[plugins]]
repo = 'skanehira/code2img.vim'
if=''' !has('nvim')'''
hook_add = '''
let g:code2img_theme = 'monokai'
let g:code2img_line_number = 1
'''
#}}}
# }}}

# Make new Function{{{
# help for f or F
[[plugins]]
repo='unblevable/quick-scope'
hook_add='''
    let g:qs_highlight_on_keys = ['f','F']
'''
# undotree
[[plugins]]
repo = 'simnalamburt/vim-mundo'
#    Easy action motions{{{
# it can easy to maeke "surround"
[[plugins]]
repo = 'tpope/vim-surround'
# it can easy to make "comment"
[[plugins]]
repo = 'tpope/vim-commentary'
# it can easy to repeate command
[[plugins]]
repo = 'tpope/vim-repeat'
#    }}}
#    Easy action commands{{{
# reading-vimrc
[[plugins]]
repo = 'y0za/vim-reading-vimrc'
# eskk.vim
[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''
let g:eskk#directory = "~/.eskk"
let g:eskk#dictionary = { 'path':"~/.skk-jisyo", 'sorted': 0, 'encoding':'utf-8',}
let g:eskk#large_dictionary = { 'path':"~/.eskk/SKK-JISYO.L", 'sorted': 1, 'encoding':'euc-jp',}
let g:eskk#enable_completion=1
let g:eskk#server = {
  \ 'host': 'localhost',
  \ 'port': '55100',
  \ 'type': 'notfound',
  \}
set imdisable
'''
# easy to change word
[[plugins]]
repo = 'lambdalisue/reword.vim'
# use for markdown
[[plugins]]
repo = 'godlygeek/tabular'
# It can run and test in vim
[[plugins]]
repo='thinca/vim-quickrun'
# use cheatsheet
[[plugins]]
repo='reireias/vim-cheatsheet'
hook_add = '''
if has('unix')
  let g:cheatsheet#cheat_file = '~/dotfiles/common/vim/plug_setting/cheatsheet.md'
else
  let g:cheatsheet#cheat_file = '~\\dotfiles\\common\\vim\\plug_setting\\cheatsheet.md'
endif
nmap <Leader>C :<c-u>Cheat<CR>
'''
# To see github.com
[[plugins]]
repo = 'skanehira/gh.vim'
hook_add = '''
  let g:gh_token=$GITHUB_OAUTH_TOKEN
'''
#    }}}
# }}}

# To use git in vim{{{
[[plugins]]
repo = 'tpope/vim-fugitive'
# Check git diff in numberline
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add='''
   set signcolumn=yes
   let g:gitgutter_map_keys = 0
   let g:gitgutter_sign_removed="-"
   nnoremap [Git] <Nop>
   nmap <Leader>g [Git]
   nmap [Git]p <Plug>(GitGutterPrevHunk)
   nmap [Git]n <Plug>(GitGutterNextHunk)
   nmap [Git]a <Plug>(GitGutterStageHunk)
   nmap [Git]u <Plug>(GitGutterRevertHunk)
   nmap [Git]v <Plug>(GitGutterPreviewHunk)
'''
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add='''
  nnoremap , <Nop>
  nnoremap ,. <Cmd>Gina cd<CR>
  nnoremap ,b <Cmd>Gina branch -av<CR>
  nnoremap ,c <Cmd>Gina compare<CR>
  nnoremap ,d <Cmd>Gina diff<CR>
  nnoremap ,l <Cmd>Gina log --graph --all<CR>
  nnoremap ,s <Cmd>Gina status<CR>
  nnoremap ,y <Cmd>Gina browse --exact --yank :<CR>
  command! Amend  Gina commit --amend
  command! Blame  Gina blame
  command! Commit Gina commit
  command! -nargs=* Stash Gina stash <args>
  '''
# }}}

# Set looks{{{
[[plugins]]
  repo = 'micchy326/lightline-lsp-progress'
# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
if !has('nvim')
  let g:lightline={
        \'active': {
        \'left': [ [ 'mode', 'paste' ],
        \[ 'gitbranch', 'gitstatus', 'readonly'],
        \[ 'filename', 'lsp_status']
        \],
        \'right':[
        \[ 'percent', 'time' ],
        \[ 'fileformat', 'fileencoding', 'filetype' ],
        \],
        \},
        \'component_function': {
        \  'gitbranch': 'gina#component#repo#branch',
        \  'gitstatus': 'MyGitStatus',
        \  'filename': 'LightlineFilename',
        \  'time':'NowTime',
        \ },
        \ 'component_type': {
        \ },
        \}

function! NowTime() abort
  return strftime("%H:%M")
endfunction


function! MyGitStatus() abort
  let staged = gina#component#status#staged()
  let unstaged = gina#component#status#unstaged()
  let conflicted = gina#component#status#conflicted()
  return printf(
        \ 's: %s, u: %s, c: %s',
        \ staged,
        \ unstaged,
        \ conflicted,
        \)
endfunction

let g:lightline.tab_component_function = {
      \'filename':'LightlineTabFilename',
      \ 'modified': 'lightline#tab#modified',
      \ 'readonly': 'lightline#tab#readonly',
      \ 'tabnum': 'lightline#tab#tabnum'}
let g:lightline.tab = {
      \ 'active': [ 'tabnum', 'filename', 'modified' ],
      \ 'inactive': [ 'tabnum', 'filename', 'modified' ]
      \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[NoN]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineTabFilename(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let _ = pathshorten(expand('#'.buflist[winnr - 1].':f'))
  return _ !=# '' ? _ : '[No Name]'
endfunction

let g:lightline.colorscheme = 'github'
'''

# Make indentline
[[plugins]]
repo = 'Yggdroot/indentLine'
on_cmd = ['IndentLinesToggle']
hook_add = '''
    let g:loaded_indentLine = 1
'''
#    Colorschemes{{{
[[plugins]]
repo = 'ghifarit53/tokyonight-vim'

[[plugins]]
repo = 'cormacrelf/vim-colors-github'
hook_add = '''
  let g:github_colors_soft = 1
  let g:github_colors_block_diffmark = 0
'''

#    }}}
# }}}
[[plugins]]
repo = 'twitvim/twitvim'
hook_add = '''
" アクセストークンは別で用意するのである
source ~/dotfiles/twitkeys.vim
let twitvim_enable_python = 1 
let twitvim_browser_cmd = 'google-chrome' 
let twitvim_force_ssl = 1 
let twitvim_count = 40
'''


[[plugins]]
repo = 'lambdalisue/fern.vim'
[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
hook_add = '''
let g:fern_git_status#disable_ignored = 1
'''
[[plugins]]
repo = 'ka-tsu-mo/at-vim-coder'
